package ar.edu.ungs.prog2.ticketek;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;

public class Funcion {

	LocalDate fecha;
	Sede sede;
	HashMap<String,Integer> entradasVendidas;
	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yy" , Locale.US);
	
	Funcion(String fecha,Sede sede) {

		this.fecha = LocalDate.parse(fecha, formatter);
		this.sede = sede;
		this.entradasVendidas = new HashMap<>();

		if(sede.getClass().getSimpleName().equals("Estadio")){

			this.entradasVendidas.put("Campo", 0);
		}
		else {

			this.entradasVendidas.put("PlateaVIP", 0);
			this.entradasVendidas.put("Platea Comun", 0);
			this.entradasVendidas.put("Platea baja", 0);
			this.entradasVendidas.put("Platea alta", 0);
		}
	}


	@Override
	public String toString() {

		StringBuilder info = new StringBuilder("(" + fecha + ")" + sede.nombre + " - ");
		
		//Si la sede es en un estadio devuelve fecha, nombre de sede, entradas vendidas y capacidad estadio.
		if ( sede.getClass().getSimpleName().equals("Estadio")) {

			info.append(entradasVendidas.get("Campo")).append(sede.capacidadMaxima);
			return info.toString();
		}
		//Si la sede es teatro o miniEstadio devuelve fecha, nombre de sede, sector, cantidad de entradas
		//vendidas por sector y capacidad del sector.
		else {
			
			for (Map.Entry<String, Integer> entrada : entradasVendidas.entrySet()) {
				
				String nombreSector = entrada.getKey();
				Integer cantidadVendida = entrada.getValue();
				int capacidad = sede.capacidadSector(nombreSector);
				info.append(nombreSector).append(": ")
				.append(cantidadVendida).append(" / ").append(capacidad).append("|");
			}
		}
		return info.toString();  
	}
}









package ar.edu.ungs.prog2.ticketek;

import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import javax.management.RuntimeErrorException;

public class Ticketek implements ITicketek {

	HashMap<String, Sede> sedes = new HashMap<>();
	HashMap<String, Espectaculo> espectaculos = new HashMap<>();
	HashMap<String,Usuario> usuarios = new HashMap<>();

	@Override
	public void registrarSede(String nombre, String direccion, int capacidadMaxima) {

		if (sedes.containsKey(nombre)) {
			throw new RuntimeException("El nombre ya esta registrado");
		}		
		Sede estadio = new Estadio(nombre,direccion,capacidadMaxima);

		sedes.put(nombre,estadio);

	}

	@Override
	public void registrarSede(String nombre, String direccion, int capacidadMaxima, int asientosPorFila,
			String[] sectores, int[] capacidad, int[] porcentajeAdicional) {

		if (sedes.containsKey(nombre)) {
			throw new RuntimeException("El nombre ya esta registrado");
		}
		Sede teatro = new Teatro(nombre,direccion,capacidadMaxima, asientosPorFila,sectores,capacidad,porcentajeAdicional);		

		sedes.put(nombre, teatro);

	}


	@Override
	public void registrarSede(String nombre, String direccion, int capacidadMaxima, int asientosPorFila,
			int cantidadPuestos, double precioConsumicion, String[] sectores, int[] capacidad,
			int[] porcentajeAdicional) {

		if (sedes.containsKey(nombre)) {
			throw new RuntimeException("El nombre ya esta registrado");
		}
		Sede miniEstadio = new miniEstadio(nombre,direccion,capacidadMaxima,asientosPorFila,cantidadPuestos,precioConsumicion,sectores,capacidad,porcentajeAdicional);
		sedes.put(nombre, miniEstadio);
	}

	@Override
	public void registrarUsuario(String email, String nombre, String apellido, String contrasenia) {
		if (usuarios.containsKey(email)) {

			throw new RuntimeException("el email ya existe en nuestra base de datos");
		}
		Usuario usuario = new Usuario(email,nombre,apellido,contrasenia);
		usuarios.put(email, usuario);
	}

	@Override
	public void registrarEspectaculo(String nombre) {

		if (espectaculos.containsKey(nombre)) {
			throw new RuntimeException("El nombre ya esta registrado");
		}
		Espectaculo espectaculo = new Espectaculo(nombre);
		espectaculos.put(nombre, espectaculo);

	}

	@Override
	public void agregarFuncion(String nombreEspectaculo, String fecha, String sede, double precioBase) {

		if (!espectaculos.containsKey(nombreEspectaculo) || !sedes.containsKey(sede)) {

			throw new RuntimeException("el espectaculo o la sede no estan registrados");
		}
		else if(!espectaculos.get(nombreEspectaculo).disponibilidadFecha(fecha)) {

			throw new RuntimeException("la fecha no esta disponible");
		}
		Funcion funcion = new Funcion(fecha,sedes.get(sede));
		espectaculos.get(nombreEspectaculo).agregarFuncion(funcion);

	}

	@Override
	public List<IEntrada> venderEntrada(String nombreEspectaculo, String fecha, String email, String contrasenia,
			int cantidadEntradas) {
		// Verificar si el usuario existe y la contraseña es correcta
		if (usuarios.get(email) == null || !usuarios.get(email).contraseña.equals(contrasenia)) {
			throw new RuntimeException("Usuario no encontrado o contraseña incorrecta");
		}
		// Verificar si el espectáculo existe
		if (espectaculos.get(nombreEspectaculo) == null) {
			throw new RuntimeException("El espectáculo no existe");
		}

		// Verificar si la función existe.        
		HashSet<Funcion> funciones = espectaculos.get(nombreEspectaculo).funciones;
		LocalDate date = LocalDate.parse(fecha);
		for (Funcion funcion : funciones) {
			if (funcion.fecha.equals(date)) 
				if (funcion == null) 
					throw new RuntimeException("La función no existe para la fecha especificada");


		}
		//Buscar sede
		Sede sede;
		for (Funcion funcion : funciones) {
			if (funcion.fecha.equals(fecha)) {
				sede = funcion.sede;
			}
		}

		// Generar las entradas
		for (int i = 0; i < cantidadEntradas; i++) {
			int codigo = 1; // Implementar metodo con solucion
			IEntrada entrada = new Entrada(codigo, nombreEspectaculo, fecha, sede);
			usuarios.get(email).entradas.put(codigo, entrada);
		}
		List<IEntrada> entradas = new ArrayList<>();
		Usuario user = usuarios.get(email);
		for (IEntrada entrada : user.entradas.values()) {

			entradas.add(entrada);						
		}

		return entradas;
	}




	@Override
	public List<IEntrada> venderEntrada(String nombreEspectaculo, String fecha, String email, String contrasenia,
			String sector, int[] asientos) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String listarFunciones(String nombreEspectaculo) {

		if (espectaculos.containsKey(nombreEspectaculo)){

			return espectaculos.get(nombreEspectaculo).toString();
		}
		else {

			return "El espectáculo \"" + nombreEspectaculo + "\" no existe.";
		}
	}

	@Override
	public List<IEntrada> listarEntradasEspectaculo(String nombreEspectaculo) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<IEntrada> listarEntradasFuturas(String email, String contrasenia) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<IEntrada> listarTodasLasEntradasDelUsuario(String email, String contrasenia) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean anularEntrada(IEntrada entrada, String contrasenia) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public IEntrada cambiarEntrada(IEntrada entrada, String contrasenia, String fecha, String sector, int asiento) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IEntrada cambiarEntrada(IEntrada entrada, String contrasenia, String fecha) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double costoEntrada(String nombreEspectaculo, String fecha) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double costoEntrada(String nombreEspectaculo, String fecha, String sector) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double totalRecaudado(String nombreEspectaculo) {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double totalRecaudadoPorSede(String nombreEspectaculo, String nombreSede) {
		// TODO Auto-generated method stub
		return 0;
	}

}

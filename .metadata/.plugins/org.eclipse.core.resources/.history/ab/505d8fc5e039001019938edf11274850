package ar.edu.ungs.prog2.ticketek;

import java.util.LinkedHashMap;
import java.util.Objects;

public class Espectaculo {

	private final String nombre;
	protected LinkedHashMap<Fecha,Funcion> funciones;
	protected double recaudacionTotal;
	protected LinkedHashMap<String,Double> recaudacionPorSede;

	public Espectaculo(String nombre){

		this.nombre = nombre;
		this.funciones = new LinkedHashMap<>();
		this.recaudacionPorSede = new LinkedHashMap<>();
		
	}


	@Override 
	public String toString() {

		StringBuilder info = new StringBuilder();

		for (Funcion funcion : funciones.values()) {

			info.append(funcion.toString());
			info.append("\n");
		}
		return info.toString();
	}


	public boolean hayFuncion(Fecha fecha){

		for (Funcion fun : funciones.values()) {
			if (fun.getFecha().equals(fecha))
				return true;
		}
		return false;
	}


	void agregarFuncion(Funcion funcion) {

		for (Funcion fun : funciones.values()) {
			if (fun.equals(funcion))
				throw new RuntimeException ("La fecha no esta disponible");
		}
		funciones.put(funcion.getFecha(),funcion);
	}


	Sede sedeFuncion(Fecha fecha){

		for (Funcion funcion : funciones.values()) {
			if (funcion.getFecha().equals(fecha)) {
				return funcion.getSede();
			}
		}
		return null;
	}




	double precioFuncion(Fecha fecha, String sector) {

		return funciones.get(fecha).precio(sector);
	}


	public void agregarVenta(Fecha fecha,String sector) {
		
		funciones.get(fecha).agregarVenta(sector);
	}

	public void quitarVenta(Fecha fecha,String sector){

		funciones.get(fecha).quitarVenta(sector);
	}


	public void agregarRecaudacion(Fecha date, String nombreSede,String sector){

		Double precioEntrada =  funciones.get(date).precio(sector);
		
		recaudacionPorSede.put(nombreSede, recaudacionPorSede.get(nombreSede) + precioEntrada);
		recaudacionTotal+=precioEntrada;

	}
	
public void agregarRecaudacion(Fecha date) {
	
	double precioEntradaEstadio =funciones.get(date).getPrecioBase();
	
	recaudacionTotal += precioEntradaEstadio;
		
	}


	@Override
	public int hashCode() {
		return Objects.hash(nombre);
	}


	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Espectaculo other = (Espectaculo) obj;
		return Objects.equals(nombre, other.nombre);
	}

}
